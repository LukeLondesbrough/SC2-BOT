[tool.poetry]
name = "burnysc2"
version = "6.5.0"
description = "A StarCraft II API Client for Python 3"
authors = ["BurnySc2 <gamingburny@gmail.com>"]
license = "MIT"
homepage = "https://github.com/Burnysc2/python-sc2"
documentation = "https://burnysc2.github.io/python-sc2/docs/index.html"
keywords = ["StarCraft", "StarCraft 2", "StarCraft II", "AI", "Bot"]
classifiers=[
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: Real Time Strategy",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [
    { include = "sc2/**/*.py" },
]

[tool.poetry.dependencies]
python = ">=3.9, <3.13"
aiohttp = "^3.7.4"
loguru = "^0.6.0"
mpyq = "^0.2.5"
numpy = "^1.26.0"
portpicker = "^1.4.0"
s2clientprotocol = "^5.0.7"
scipy = "^1.7.1"
protobuf = "<4.0.0"

[tool.poetry.group.dev.dependencies]
coverage = "^7.2"
hypothesis = "^6.23.1"
matplotlib = "^3.4.3"
pillow = "^9.0"
pre-commit = "^2.15.0"
pyglet = "^2.0"
pytest = "^7.1.1"
pytest-asyncio = "^0.18.3"
pytest-benchmark = "^4.0.0"
pytest-cov = "^4.0.0"
radon = "^5.1.0"
sphinx = "^7.0"
sphinx-autodoc-typehints = "^1.18"
sphinx-rtd-theme = "^2.0"
toml = "^0.10.2"
# Linter
ruff = "^0.1.14"
# Type checker
pyre-check = "^0.9.18"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.ruff]
target-version = 'py38'
line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4",  # flake8-comprehensions
    "E",   # Error
    "F",   # pyflakes
    "BLE", # flake8-blind-except
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "W",   # Warning
    "Q",   # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    #    "A",  # flake8-builtins
]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
# Remove once support for py3.8 and 3.9 is dropped
keep-runtime-typing = true

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "classmethod"]
